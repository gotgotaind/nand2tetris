// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static array biti;

    /** Initializes the library. */
    function void init() {
        var int i;
        let biti = Array.new(16);
        let i=1;
        let biti[0]=1;
        while ( i<16 ) {
            let biti[i]=biti[i-1]+biti[i-1];
            //do Output.printInt(i);
            //do Output.printString(": ");
            //do Output.printInt(biti[i]);
            //do Output.printChar(String.newLine());
            let i=i+1;
        }
        //do Keyboard.readChar();
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        // x+(-x)=2^16
        // x=2^16-(-x)
        if ( x > 0 ) {
            return x;
        }
        if ( x = 0 ) {
            return x;
        }
        
        // if ( x < 0 )
        return ( (~ x) + 1 );
        
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,sx,j;
        let sum=0;
        let sx=x;
        let j=0;
        while ( j < 16 ) {
            //if ( jsbit of y = 1 ) {
            if ( ( y & biti[j] ) = biti[j] ) {
                let sum=sum+sx;
            }
            let sx=sx+sx;
            let j=j+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int a;        
        var boolean sign;

        if ( y = 0 ) {
            do Sys.error(3000);
        }
        
        if ( x = 0 ) {
            return 0;
        }
        
        if ( (( x > 0 ) & ( y > 0 )) | (( x < 0 ) & (y < 0 )) ) {
            let sign = true;
        }
        else {
            let sign = false;
        }
        
        let x=Math.abs(x);
        let y=Math.abs(y);
                     
        let q=Math.divide_positive_integers(x,y);

        if ( sign ) {
            //do Output.printString("true");
            return q;
        }
        else
        {
            //do Output.printString("false");
            return -q;
        }

    }

    function int divide_positive_integers(int x, int y) {
        var int q;
        var int a;        
               
        if ( y > x ) {
            return 0;
        }
        
        let q=Math.divide_positive_integers(x,y+y);
        if ( y < 0 ) {
            do Sys.error(3001);
        }
        let a=Math.multiply(q,y);
        let a=a+a;
        if ( ( x - a ) < y ) {
            let q=q+q;
            return q;
        }
        else {
            let q=q+q+1;
            return q;
        } 
    }
    
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        
        let y=0;        
        let j=7;
        
        while( j > -1 ) {
            if (
                (( Math.multiply( y + biti[j],y + biti[j] ) - 1 )< x)
                &
                ( Math.multiply( y + biti[j],y + biti[j] ) > 0 )
            ) {
                let y = y + biti[j];
            }
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a > b ) {
            return a;
        }
        else
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a < b ) {
            return a;
        }
        else
        {
            return b;
        }
    }
}
