// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static int nrow;
	static int ncol;
	static int screen_addr;
	static boolean color;
	static array biti;
	
    /** Initializes the Screen. */
    function void init() {
		var int i;
		
		let nrow=512;
		let ncol=256;
		let screen_addr=16384;
		let color=true;
		
        let biti = Array.new(16);
        let i=1;
        let biti[0]=1;
        while ( i<16 ) {
            let biti[i]=biti[i-1]+biti[i-1];
            let i=i+1;
        }
		
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int nwords;
		var int i;
		let nwords=8192; // 512*256/16
		let i=0;
		while ( i< nwords ) {
			do Memory.poke(screen_addr+i,0);
			let i=i+1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color=b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int addr;
		var int cur_word;
		var int pix_word;
		var int dest_word;
		var int bit_pos;
		var int mask;
		
		let addr=screen_addr+Math.multiply(y,32)+Math.divide(x,16);
		let cur_word=Memory.peek(addr);
		let bit_pos=x-Math.multiply(Math.divide(x,16),16);
		let pix_word=biti[bit_pos];
		
		if( color ) {
			let dest_word=pix_word | cur_word;
		}
		else {
			let pix_word = ~ pix_word;
			let dest_word=pix_word & cur_word;
		}
		do Memory.poke(addr,dest_word);
		
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		return;
    }
}
