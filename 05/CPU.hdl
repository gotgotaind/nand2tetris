// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // ARegMux
        Mux16(a=ARegMuxi,b=instruction,sel=ARegMuxC,out=ARegMuxo);
        // AReg
        ARegister(in=ARegMuxo,load=ARegC,out=ARego,out[0..14]=addressM);
        // DReg
        DRegister(in=DRegMuxi,load=DRegC,out=DRego);
        // AMMux
        Mux16(a=ARego,b=inM,sel=AMMuxC,out=AMMuxo);
        // PC
        PC(in=ARego,load=PCC,inc=true,reset=reset,out[0..14]=pc);
        // ALU
        ALU(
            // IN
            x=DRego,
            y=AMMuxo,       
            zx=instruction[11], // zero the x input?
            nx=instruction[10], // negate the x input?
            zy=instruction[9], // zero the y input?
            ny=instruction[8], // negate the y input?
            f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
            no=instruction[6], // negate the out output?

            // OUT 
            out=outM, // 16-bit output
            out=ARegMuxi,
            out=DRegMuxi,
            zr=zr, // 1 if (out == 0), 0 otherwise
            ng=ng  // 1 if (out < 0),  0 otherwise
        );
        
        Not(in=instruction[15],out=NotI0);
        And(a=true,b=NotI0,out=ARegMuxC);
        Or(a=NotI0,b=instruction[5],out=ARegC);
        And(a=instruction[15],b=instruction[4],out=DRegC);
        And(a=true,b=instruction[12],out=AMMuxC);
        And(a=instruction[15],b=instruction[3],out=writeM);
        // PCC
        And(a=ng,b=instruction[2],out=negjump);
        And(a=zr,b=instruction[1],out=zerojump);
        Not(in=ng,out=notng);
        Not(in=zr,out=notzr);
        And(a=notng,b=notzr,out=pos);
        And(a=pos,b=instruction[0],out=posjump);
        Or(a=negjump,b=zerojump,out=jump0);
        Or(a=jump0,b=posjump,out=jump);
        And(a=instruction[15],b=jump,out=PCC);        
}