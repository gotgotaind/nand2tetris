// This file is a derivative of a part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Original File name: projects/09/Square/Square.jack

/** Implements a graphical snake. */
class Snake {

   field int size; // size of a snake vertex, in pixels
   field int length; // length of the snake 
   field Array vertices; // list of vertices

   /** Constructs a new snake with a given location and size. */
   constructor Snake new(Vertex vertex, int _size) {
      let size = _size;
      let length = 1;
      let vertices=Array.new(length);
      let vertices[0]=vertex;
      do vertex.draw(size);
      return this;
   }

   /** Disposes this snake. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }
  
   /** Moves the snake into dirVector direction */
   method void move(Array dv,Food food) {
      var int nx;
      var int ny;
      var Vertex head;
      var int x;
      var int y;
      var int i;
      var Vertex vertex;
      var Array nvertices;
      var Array overtices;
      let head=vertices[length-1];
      let y=head.gety();
      //do Output.printString("Here line 42"); //d
      //do Output.println(); //d
      //do Output.printInt(y); //d
      let x=head.getx();
      
      let nx=x+dv[0];
      let ny=y+dv[1];
      if ( (nx < (512-size) ) & (nx > -1) & (ny < (256-size)) & (ny > -1) ) {
        if ( ( nx = food.getx() ) & ( ny = food.gety() ) )
        {
            //do Output.printString("Here line 52, about to enter snake.eat"); //d
            //do Output.println(); //d    
            do eat(food);
            let head=vertices[length-1];
            do head.draw(size);
        }
        else
        {
            //do Output.printString("Here line 52, about to move without eating"); //d
            //do Output.printInt(length); //d
            //do Output.println(); //d 
            let vertex=vertices[0];
            do vertex.erase(size);
            let nvertices=Array.new(length);
            let i = 0;
            while ( i < (length-1) ) {
                let nvertices[i]=vertices[i+1];
                let i=i+1;
            }
            do head.setx(nx);
            do head.sety(ny);
            do head.draw(size);
            let nvertices[length-1]=head;
            let overtices=vertices;
            let vertices=nvertices;
            do Memory.deAlloc(overtices);
        }

      }
      //do Output.printString("Here line 75, returning from move"); //d
      //do Output.println(); //d
      return;
   }
   method void eat(Food food)
   {
        var Array nvertices;
        var Array overtices;
        var int i;
        let nvertices=Array.new(length+1);
        let nvertices[length]=Vertex.new(food.getx(),food.gety());
        let i=0;
        while ( i < length ) {
            let nvertices[i]=vertices[i];
            let i=i+1;
        }
        let overtices=vertices;
        let vertices=nvertices;
        let length=length+1;
        do Memory.deAlloc(overtices);
        return;
   }
   
    method Vertices get_vertices() {
        return vertices;
    }
}
